#include <random>
#include <vector>
#include <algorithm>

#include "../../src/utils/xxhash32.h"
#include "../../src/utils/leader_zero.h"
#include "spdlog/spdlog.h"
#include "gtest/gtest.h"

double gene_rand() {
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> distrib(0.0, 1.0);

    return distrib(gen);
}
TEST(xxhash32, leader_zero_num) {
    uint32_t max_leader_zero = 0;
    uint32_t cur_leader_zero = 0;
    uint32_t test_cnt = 1e3;
    XXHash32 hash_fun(54);

    spdlog::info("hello");
//    for (uint32_t i = 0; i < test_cnt; i++)
//    {
//        hash_fun.add(&i, sizeof(i));
////        cur_leader_zero = get_leader_zero(hash_fun.hash());
////        if (cur_leader_zero > max_leader_zero) {
////            max_leader_zero = cur_leader_zero;
////        }
////        spdlog::info("test_num: {}, max leader zero = {}",i, max_leader_zero);
//        spdlog::info("test_num: {}, hash converted to p = {}",i, double(hash_fun.hash() % 1000) /1000 );
//    }

    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> distrib(0.0, 1.0);

    for (int n=0; n<10; ++n)
        //Use `distrib` to transform the random unsigned int generated by gen into an int in [1, 6]
        std::cout << distrib(gen) << ' ';
    std::cout << '\n';

    for (int i = 0; i < 20; ++i) {
        std::cout << gene_rand() << std::endl;
    }

    std::vector<int> vec = {34, 1, 5, 9, 113, 32, 11};
    std::sort(vec.begin(), vec.end(), std::less<int>());
    for (auto it: vec) {
        std::cout << it << ' ';
    }
}